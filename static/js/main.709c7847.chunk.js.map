{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","sm","cx","card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","vriant","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","imgContainer","src","coronaImage","alt","image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.709c7847.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1EQqo\",\"card\":\"Cards_card__1Dkp_\",\"confirmed\":\"Cards_confirmed__3oJQ9\",\"recovered\":\"Cards_recovered__2lel8\",\"deaths\":\"Cards_deaths__1m_9E\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) =>{\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} sm={3} className={cx([styles.card, styles.confirmed])}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography vriant='body2'>Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12}  sm={3} className={cx([styles.card, styles.recovered])}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography vriant='body2'>Number of recoveries of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} sm={3} className={cx([styles.card, styles.deaths])}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography vriant='body2'>Number of deaths from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) =>{\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {data: {confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n        return {confirmed, recovered, deaths, lastUpdate}\r\n\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () =>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return []\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountries = async () =>{\r\n    const { data:{countries} } = await axios.get(`${url}/countries`);\r\n    return countries.map(country => country.name);\r\n}\r\n\r\nexport default fetchCountries;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport {fetchDailyData} from '../../api';\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = ({data:{confirmed, recovered, deaths}, country}) =>{\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () =>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n                data = {{\r\n                    labels:['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [{\r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(0, 0, 255, 0.5)',\r\n                            'rgba(0, 255, 0, 0.5)',\r\n                            'rgba(255, 0, 0, 0.5)'\r\n                        ],\r\n                        data: [confirmed.value, recovered.value, deaths.value]\r\n                    }]\r\n                 }}\r\n                options = {{\r\n                    legend: { display:false},\r\n                    title:  { display:true, text: `Current State in ${country}`}\r\n\r\n                }}\r\n\r\n            />\r\n        ): null\r\n    )\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ?(\r\n        <Line\r\n            data={\r\n                {\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({confirmed}) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    },\r\n\r\n                    {\r\n                        data: dailyData.map(({confirmed}) => confirmed),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255, 0,0, 0.5)',\r\n                        fill: true\r\n                    }],\r\n                }\r\n            }\r\n\r\n        />) : null\r\n\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            { country ? barChart : lineChart }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker = ({ handleCountryChange }) =>{\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () =>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries])\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.FormControl}>\r\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\nimport {Cards, CountryPicker, Chart} from './components';\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api'\r\nimport coronaImage from './images/image.png'\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        data: {},\r\n        country: ''\r\n    }\r\n\r\n    handleCountryChange = async (country) =>{\r\n        // fetch the data, then set the state\r\n        try{\r\n            const fetchedData = await fetchData(country);\r\n            this.setState({data: fetchedData, country:country});\r\n        }catch(e){\r\n            console.log(e)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        this.setState({data: fetchedData});\r\n    }\r\n\r\n    render(){\r\n        const {data, country} = this.state;\r\n        return (\r\n            <div className={styles.container}>\r\n                <div className={ styles.imgContainer}>\r\n                    <img src={coronaImage} alt=\"SIRS-Cov2\" className={styles.image}/>\r\n                </div>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange= { this.handleCountryChange }/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__15qUm\",\"image\":\"App_image__3eYtK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2hicQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__22zfV\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}